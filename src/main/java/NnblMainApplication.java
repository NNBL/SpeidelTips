import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.util.converter.DoubleStringConverter;
import javafx.util.converter.IntegerStringConverter;

import java.io.*;
import java.net.URL;
import java.util.ResourceBundle;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'henrik' at '5/14/15 6:42 PM' with Gradle 2.4
 *
 * @author henrik, @date 5/14/15 6:42 PM
 */
public class NnblMainApplication extends Application implements Initializable, ChangeListener{
    @FXML
    private TableView table;

    @FXML
    private LineChart chart;

    @FXML
    private ChoiceBox<String> dropdown;

    private TableColumn brewName;
    private TableColumn brewer;
    private TableColumn grainWeight;
    private TableColumn efficiency;
    private TableColumn og;
    private TableColumn fg;
    private TableColumn mashTemp;
    private TableColumn attenuation;
    private TableColumn yeastType;
    private TableColumn remarks;

    private File file;

    private ObservableList<NNBLBrew> data;

    private NNBLBrewDatabase db = new NNBLBrewDatabase();

    @Override
    public void start(Stage stage) throws Exception {
        stage.setTitle("NNBL Data viewer 2.0b");

        Parent root = FXMLLoader.load(getClass().getResource("NnblMainApplication.fxml"));

        stage.setScene(new Scene(root, 800, 500));
        stage.show();
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        initTable();
        initDropdown();
    }

    private void initDropdown() {
        dropdown.setItems(FXCollections.observableArrayList(
                         "Efficiency vs grain weight", "Mash temp vs yeast attenuation")
        );

        dropdown.setTooltip(new Tooltip("Select a plot"));
        dropdown.getSelectionModel().selectFirst();
        dropdown.getSelectionModel().selectedItemProperty().addListener(this);

    }

    private void initTable() {
        table.setEditable(true);

        brewName = new TableColumn("Brew Name");
        brewName.setCellValueFactory(new PropertyValueFactory<NNBLBrew, String>("brewname"));
        brewName.setCellFactory(TextFieldTableCell.forTableColumn());
        brewName.prefWidthProperty().bind(table.widthProperty().multiply(0.2));
        brewName.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<NNBLBrew, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<NNBLBrew, String> t) {
                        ((NNBLBrew) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setBrewname(t.getNewValue());
                    }
                }
        );


        brewer = new TableColumn("Brewer");
        brewer.setCellValueFactory(new PropertyValueFactory<NNBLBrew, String>("brewer"));
        brewer.setCellFactory(TextFieldTableCell.forTableColumn());
        brewer.prefWidthProperty().bind(table.widthProperty().multiply(0.1));
        brewer.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<NNBLBrew, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<NNBLBrew, String> t) {
                        ((NNBLBrew) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setBrewer(t.getNewValue());
                    }
                }
        );


        grainWeight = new TableColumn("Grain weight");
        grainWeight.setCellValueFactory(new PropertyValueFactory<NNBLBrew, Integer>("grainweight"));
        grainWeight.setCellFactory(TextFieldTableCell.<NNBLBrew, Integer>forTableColumn(new IntegerStringConverter()));
        grainWeight.prefWidthProperty().bind(table.widthProperty().multiply(0.1));
        grainWeight.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<NNBLBrew, Integer>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<NNBLBrew, Integer> t) {
                        ((NNBLBrew) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setGrainweight(t.getNewValue());
                    }
                }
        );

        efficiency = new TableColumn("Efficiency");
        efficiency.setCellValueFactory(new PropertyValueFactory<NNBLBrew, Double>("efficiency"));
        efficiency.setCellFactory(TextFieldTableCell.<NNBLBrew, Double>forTableColumn(new DoubleStringConverter()));
        efficiency.prefWidthProperty().bind(table.widthProperty().multiply(0.1));
        efficiency.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<NNBLBrew, Double>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<NNBLBrew, Double> t) {
                        ((NNBLBrew) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setEfficiency(t.getNewValue());
                    }
                }
        );

        og = new TableColumn("OG");
        og.setCellValueFactory(new PropertyValueFactory<NNBLBrew, Integer>("originalGravity"));
        og.setCellFactory(TextFieldTableCell.<NNBLBrew, Integer>forTableColumn(new IntegerStringConverter()));
        og.prefWidthProperty().bind(table.widthProperty().multiply(0.05));
        og.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<NNBLBrew, Integer>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<NNBLBrew, Integer> t) {
                        ((NNBLBrew) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setOriginalGravity(t.getNewValue());
                    }
                }
        );

        fg = new TableColumn("FG");
        fg.setCellValueFactory(new PropertyValueFactory<NNBLBrew, Integer>("finalGravity"));
        fg.setCellFactory(TextFieldTableCell.<NNBLBrew, Integer>forTableColumn(new IntegerStringConverter()));
        fg.prefWidthProperty().bind(table.widthProperty().multiply(0.05));
        fg.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<NNBLBrew, Integer>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<NNBLBrew, Integer> t) {
                        ((NNBLBrew) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setFinalGravity(t.getNewValue());
                    }
                }
        );

        mashTemp = new TableColumn("Mash temp");
        mashTemp.setCellValueFactory(new PropertyValueFactory<NNBLBrew, Double>("mashTemp"));
        mashTemp.setCellFactory(TextFieldTableCell.<NNBLBrew, Double>forTableColumn(new DoubleStringConverter()));
        mashTemp.prefWidthProperty().bind(table.widthProperty().multiply(0.1));
        mashTemp.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<NNBLBrew, Double>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<NNBLBrew, Double> t) {
                        ((NNBLBrew) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setMashTemp(t.getNewValue());
                    }
                }
        );

        attenuation = new TableColumn("Attenuation");
        attenuation.setCellValueFactory(new PropertyValueFactory<NNBLBrew, Double>("attenuation"));
        attenuation.setCellFactory(TextFieldTableCell.<NNBLBrew, Double>forTableColumn(new DoubleStringConverter()));
        attenuation.prefWidthProperty().bind(table.widthProperty().multiply(0.1));
        attenuation.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<NNBLBrew, Double>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<NNBLBrew, Double> t) {
                        ((NNBLBrew) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setAttenuation(t.getNewValue());
                    }
                }
        );

        yeastType = new TableColumn("Yeast");
        yeastType.setCellValueFactory(new PropertyValueFactory<NNBLBrew, String>("yeasttype"));
        yeastType.setCellFactory(TextFieldTableCell.forTableColumn());
        yeastType.prefWidthProperty().bind(table.widthProperty().multiply(0.1));
        yeastType.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<NNBLBrew, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<NNBLBrew, String> t) {
                        ((NNBLBrew) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setYeasttype(t.getNewValue());
                    }
                }
        );


        remarks = new TableColumn("Remarks");
        remarks.setCellValueFactory(new PropertyValueFactory<NNBLBrew, String>("remarks"));
        remarks.setCellFactory(TextFieldTableCell.forTableColumn());
        remarks.prefWidthProperty().bind(table.widthProperty().multiply(0.1));
        remarks.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<NNBLBrew, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<NNBLBrew, String> t) {
                        ((NNBLBrew) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setRemarks(t.getNewValue());
                    }
                }
        );


        table.getColumns().addAll(brewName, brewer, grainWeight, efficiency, og, fg, mashTemp, attenuation, yeastType, remarks);

    }

    @FXML
    private void openFile(){
        System.out.println("open file");
        FileChooser fc = new FileChooser();
        file = fc.showOpenDialog(null);
        if (file != null) {
            db.loadBrewsFromFile(file.getPath());
            data = FXCollections.observableArrayList(db.getBrews());
            table.setItems(data);
            updatePlot(NNBLBrewDatabase.GRAIN_WEIGHT, NNBLBrewDatabase.EFFICIENCY);

        }
    }

    @FXML
    private void saveFile(){
        System.out.println("saving file");
        if (file != null){
            try (Writer out = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(file), "UTF-8"));) {
                out.write(db.dbAsCsv());
            } catch (IOException e) {
                e.printStackTrace();

            }

        }
    }

    @FXML
    protected void exitApplication(){
        System.exit(0);
    }

    @FXML
    private void showAbout(){
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setHeaderText("Header here");
        alert.setContentText("About text here");
        alert.show();
        System.out.println("showing about dialog");
    }

    @FXML
    private void addBrew(){
        if (data != null){
            System.out.println("adding brew");
            db.addBrew(new NNBLBrew(" , ,0,0.0,0,0,0.0,0.0, , ".split(",")));
            data = FXCollections.observableArrayList(db.getBrews());
            table.setItems(data);

            table.getSelectionModel().selectLast();
            table.scrollTo(data.size()-1);
        }

    }

    @FXML
    private void deleteBrew(){
        System.out.println("deleting brew");
    }

    @Override
    public void changed(ObservableValue observable, Object oldValue, Object newValue) {
        if (newValue.equals("Mash temp vs yeast attenuation")) {
            updatePlot(NNBLBrewDatabase.MASH_TEMPERATURE, NNBLBrewDatabase.ATTENUATION);
        } else  if (newValue.equals("Efficiency vs grain weight")){
            updatePlot(NNBLBrewDatabase.GRAIN_WEIGHT, NNBLBrewDatabase.EFFICIENCY);
        }

    }

    private void updatePlot(int xAxis, int yAxis) {
        if (xAxis == NNBLBrewDatabase.MASH_TEMPERATURE && yAxis == NNBLBrewDatabase.ATTENUATION) {
            chart.getData().clear();
            chart.setTitle("Mash temperature vs yeast attenuation");


            for (NNBLBrew nnblBrew : db.getBrews()) {
                XYChart.Series<Number, Number> series = new XYChart.Series();
                series.setName(nnblBrew.getBrewname());
                series.getData().add(new XYChart.Data(nnblBrew.getMashTemp(), nnblBrew.getAttenuation()));
                chart.getData().add(series);
                chart.getXAxis().setAutoRanging(false);

                chart.getXAxis().setLabel("Mash temperature [C]");
                chart.getYAxis().setLabel("Yeast attenuation [%]");
                ((NumberAxis) chart.getXAxis()).setTickUnit(1);
                ((NumberAxis) chart.getXAxis()).setUpperBound(70);
                ((NumberAxis) chart.getXAxis()).setLowerBound(63);
            }


        } else if (xAxis == NNBLBrewDatabase.GRAIN_WEIGHT && yAxis == NNBLBrewDatabase.EFFICIENCY) {
            chart.setTitle("Grain weight vs efficiency");
            chart.getData().clear();


            for (NNBLBrew nnblBrew : db.getBrews()) {
                XYChart.Series<Number, Number> series = new XYChart.Series();
                series.setName(nnblBrew.getBrewname());
                series.getData().add(new XYChart.Data(nnblBrew.getGrainweight(), nnblBrew.getEfficiency()));
                chart.getData().add(series);
                chart.getXAxis().setAutoRanging(false);
                chart.getYAxis().setAutoRanging(false);

                chart.getXAxis().setLabel("Grain weight [g]");
                chart.getYAxis().setLabel("Efficiency [%]");
                ((NumberAxis) chart.getXAxis()).setTickUnit(500);
                ((NumberAxis) chart.getXAxis()).setUpperBound(7000);
                ((NumberAxis) chart.getXAxis()).setLowerBound(3500);

                ((NumberAxis) chart.getYAxis()).setTickUnit(5);
                ((NumberAxis) chart.getYAxis()).setUpperBound(100);
                ((NumberAxis) chart.getYAxis()).setLowerBound(60);
            }

        }

    }

}
